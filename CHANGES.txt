pypet 0.1b.6

*   The storage service prints status updates for loading and storing trees

*   v_as_run is not longer None for a trajectory but `run_ALL`

*   The Queue storage writer now stores batches of single runs to avoid
    re-opening of files as much as possible

*   Faster Loading of data

pypet 0.1b.5

*   New auto load feature

*   BUG FIX: When parameters are emptied, the default value is set to None (and no longer kept)

*   Now items are only saved once, if the node already exist on disk, storage is refused
    (Previously new data was added if it was not within the leaf before, but this can lead to
    strange inconsistencies).

*   BUG FIX: `f_has_children` of a group node, now returns the correct result

*   Refactored continuing of trajectories. Now this is based on `dill` and works also
    with data that cannot be pickled. `f_continue_run` is renamed `f_continue` to emphasize
    this change in API

*   Picking the search strategy and using `v_check_uniqueness` is no longer supported.
    Sorry for the inconvenience. So forward search will always check if it finds 2 nodes
    with the same name within the same depth, and skip search if the next tree depth is entered.

*   `f_contains` of group nodes has per default `shortcuts=False`

*   There exists now the abstract class `HasLogger` in pypetlogging.py that establishes
    a unified logging framework

*   Likewise the loggers of all network components are now private objects `_logger` and
    so is the function `_set_logger`.

*   BUG FIX: `f_get_run_information` now works without passing any arguments

*   Trajectories no longer accept a `file_tile` on initialisation

*   One can now decide if trajectories should be automatically stored and if
    data should be cleaned up after every run

*   BUG FIX: Storage of individual items during a single run do no longer require
    a full storage of the single run container.

*   If automatic storage is enabled, trajectories are now stored at the end of the experiment,
    no longer before the starting of the single runs

*   You can use the `$` character to decide where the HDF5 file tree should branch out for the
    individual runs

*   `v_creator_name` is now called `v_run_branch` (since single runs can also create
    items that are not part of a run branch, so this is no longer misleading`.

*   Results and parameters now issue a warning when they have been stored and you
    change their data

*   Parameters now have a property `v_explored` which is True for explored parameters
    even if the range has been removed

*   By default `backwards_search` is turned off!

*   Brian parameters no longer store the `storage_mode` explicitly

*   BUG FIX: Wildcard character now always defaults to `run_ALL` if trajectory is not set
    to particular run

*   BUG FIX: Now names with `XXXrun_` are again allowed only `run_` are forbidden.


pypet 0.1b.4

*   Annotations and Results now support __setitem__, which is analogue to `f_get` and `f_set`

*   Group Nodes can now contain comments as well

*   Comments are only stored to HDF5 if they are not the empty string

*   Large Overview Tables are off by default

*   BrianDurationParameter was removed and the annotations are used instead.
    Use a normal BrianParameter and instead of `v_order` use `v_annotations.order`

*   The user is advised to use `environment.f_run(manager.run_network)`, instead of
    `environment.f_run(run_network, manager)`

*   Now there is the distinction between `small`, `large`, and `summary` tables

*   BrianMonitorResult: Mean and variance values of State and MultiState Monitors are only
    extracted if they were recorded (which for newer BRIAN versions is only the case if you
    do NOT record traces)

*   Log Level can be passed to environment

*   BUG FIX: Scalars are no longer autoconverted by the storage service to zero-length numpy arrays

*   Names of loggers have been shortened

*   The trajectory now contains the functions `f_delete_item` and `f_delete_items` to erase stuff
    from disk. `f_remove_items` and `f_remove_item` no longer delete data from disk.

*   Loading and deletions of items can now be made with SingleRuns as well.

*   f_iter_nodes now iterates by default recursively all nodes

*   A group node now supports __iter__ which simply calls f_iter_nodes NON recursively

*   The structure of the trees are slightly changed. Results and derived parameters added
    with the trajectory are no longer assigned the prefix `trajectory`.
    Results and derived parameters added during single runs are now sorted into
    `runs.run_XXXXXXXXX`.

*   Useless shortcuts have been removed.

*   New *Backwards* search functionality

*   New `f_get_all` functionality to find all items in a tree matching a particular
    search string

*   Pandas Series and Panels are now supported, too!

*   Now Pypet allows compression of HDF5 files, this can yield a massive reduction in
    memory space.

*   `tr`, `cr`, `current_run`, `param`, `dparam` are no longer supported as a shortcuts

*   __getitem__ is equivalent to __getattr__

*   Now one can specify a maximum depth for accessing items.

*   Now one can specify if shortcuts, i.e. hopping over parts of the tree, are allowed.

*   New trajectroy attributes `v_backwards_search`, `v_max_depth`, `v_shortcuts` and
    `v_iter_recursive`. `v_iter_recursive` specifies the behavior of `__iter__`.

*   `__contains__` now greps is arguments from the attributes `v_max_depth` and `v_shortcuts`.

*   `log_stdout` parameter of the Environment determines if STDOUT and STDERROR will be logged
    to files. Can be disabled to allow better usage of pypet with interactive consoles.

*   git commits only happen on changes and not all the time

*   Now one can specify CPU, RAM and Swap cap levels if no pool is used.
    If these cap levels are crossed *pypet* won't start new processes.

*   `f_load` now has an argument `load_all` to quickly load all subtrees with the same setting.
    Also `f_load` now accepts a filename as well

*   New post-processing and pipeline modes!


pypet 0.1b.3

*   BUG FIX: Now `f_run` and `f_continue_run` of an environment return the results
    produced by `runfunc`

*   You can enforce a type convert for exploration

*   Added lazy_debug option for the environment

*   If you don't specify a filename, the environment defaults to a file with the name of
    the trajectory

*   New multiprocessing mode (`use_pool=False` for environment) to spawn individual processes
    for each run. Useful if data cannot be pickled.

*   New Brian framework with NetworkManager, NetworkComponent, NetworkAnalyser,
    NetworkRunner and DurationParameter

*   Components, Analysers and the network runner of the manager are now publicly available

*   Every component now provides the function `set_logger` to enable logging and instantiate a
    logger for `self.logger`



pypet 0.1b.2

*   DefaultReplacementError is now called PresettingError

*   Now the runtime of single runs is measured and stored.

*   __getitem__ of the trajectory always returns the instance and fast access is not applied

*   PickleResult and PickleParameter support the choice of protocol

*   Explored Sparse matrices are stored under a slightly different name to disk.

*   BUG FIX: BFS works properly

*   BUG FIX: f_iter_runs is now affected if f_as_run is chosen

*   Annotations support __iter__

*   Annotations support __getitem__

*   BrianMonitorResult, the property and columne 'times' for the Spike and StateSpikeMonitor
    has been renamed 'spiketimes'.

*   Results support __iter__

*   BrianMonitorResult, the name of state variables in array mode
    is changed to varname+'_%Xd', instead of varname+'_idx%08d', and 'spiketimes_%08d' to
    'spiketimes_%Xd' and X is chosen in accordance with the number of neurons

*   BUG FIX: nested_equal now supports Object Tables containing numpy arrays

*   Better categorizations of the utility functions

*   Comments are no longer limited in size

*   New Brian Result

*   Storage Service in case of purging now sets the comment to the result with the lowest index,
    in case of multiprocessing.

*   Old API names are kept, but emit a depricated warning.

*   The exploration array is now termed range. Accordingly, the function `f_is_array` is
    renamed `f_has_range` and `f_get_array` renamed to `f_get_range`.

*   v_leaf renamed to v_is_leaf

*   f_is_root renamed to v_is_root and changed to property

*   v_fast_accessible renamed to f_supports_fast_access and changed to function

*   v_parameter changed to v_is_parameter



pypet 0.1b.1

*   Support for `long` types

*   Documentation for the `f_find_idx` function

*   The parameters `trajectory_name` and `trajectory_index` in f_load have been renamed to
    `name` and `index`


pypet 0.1b.0

*   Group nodes support __getitem__

*   SparseResult

*   If you merge trajectory, all environment settings of both are kept.

*   More information about the environment is added to the trajectory

*   BUG FIX:

    Recall of trajectory comments from diks yielded numpy strings instead of python strings
    This could cause trouble if the comment is empty!

*   Git Integration, you can now make autocommits for every experiment

*   New Sparse Parameter, for scipy sparse matrices

*   BUG FIX: Loading of Trajectory metadata, now v_time is loaded correctly

*   BUG FIX: Expand no longer repeats already run experiments

*   More fine grain overview tables

*   Comments for runs are only added once and not every run

*   The overview tables are now found in the group `overview`

*   Test are operating in a temp directory

*   Now you can have fast access with result if they contain only a single entry with the name of
    the result

*   New trajectory function `f_as_run` that makes the trajectory belief it is a particular
    single run and results and derived parameters of other runs are blinded out.


pypet 0.1a.6

*   BUG FIX: (HDF5StorageService): storing a trajectory several times increased run and info table


pypet 0.1a.5

*   Removed unnecessary imports
*   Better documentation


pypet 0.1a.4

*   Adding positional results will add them with the result name


pypet 0.1a.3

*   Better handling of filenames, now relative paths are considered


pypet 0.1a.2

*   Added automatic version grapping in setup.py


pypet 0.1a.1

*   BaseParameter supports now __getitem__ if it is an array